#!/bin/bash
set -e # Exit on error

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
ENV_FILE="${SCRIPT_DIR}/.env"

# Load .env file if it exists to get ES_VERSION early, otherwise use defaults
if [ -f "${ENV_FILE}" ]; then
    echo "Loading existing .env file..."
    # shellcheck source=.env
    source "${ENV_FILE}"
fi

DEFAULT_VERSION="8.18.0"
VERSION=${ES_VERSION:-${1:-$DEFAULT_VERSION}} # Prioritize ES_VERSION from .env, then script arg, then default

CRACK_BUILDER_DIR="${SCRIPT_DIR}/crack-builder"
CRACK_OUTPUT_DIR_HOST="${SCRIPT_DIR}/crack"

ES_HOST_DATA_DIR="${SCRIPT_DIR}/es_host_data"
ES_CERTS_OUTPUT_DIR="${SCRIPT_DIR}/es_host_config/certs" # Certs generated by tls-setup
CONFIG_DIR="${SCRIPT_DIR}/config"
SCRIPTS_DIR="${SCRIPT_DIR}/scripts"

echo "--- Initializing Cracked ELK Stack Setup (Version: ${VERSION}) ---"
echo "This script prepares directories, pulls images, creates placeholder configs, and builds the crack."
echo "Passwords, certificates, and stack startup are handled by '.env' and './start-elk.sh'."

# 1. Set vm.max_map_count
echo "[1/5] Setting vm.max_map_count (requires sudo)..."
CURRENT_MAX_MAP_COUNT=$(sudo sysctl -n vm.max_map_count || true)
if [ -z "$CURRENT_MAX_MAP_COUNT" ] || [ "$CURRENT_MAX_MAP_COUNT" -lt "262144" ]; then
    if sudo sysctl -w vm.max_map_count=262144; then
        echo "vm.max_map_count set to 262144."
    else
        echo "Warning: Failed to set vm.max_map_count. Elasticsearch might not start correctly."
        echo "Please set it manually: sudo sysctl -w vm.max_map_count=262144"
    fi
else
    echo "vm.max_map_count is already sufficient ($CURRENT_MAX_MAP_COUNT)."
fi

# 2. Pull base Docker images
echo "[2/5] Pulling Elasticsearch and Kibana images (version ${VERSION})..."
if ! sudo docker pull "elasticsearch:${VERSION}"; then
    echo "ERROR: Failed to pull elasticsearch:${VERSION}. Please check version or network."
    exit 1
fi
if ! sudo docker pull "kibana:${VERSION}"; then
    echo "ERROR: Failed to pull kibana:${VERSION}. Please check version or network."
    exit 1
fi

# 3. Create host directories and placeholder config files
echo "[3/5] Ensuring host directories and placeholder configurations exist..."
mkdir -p "${ES_HOST_DATA_DIR}"
mkdir -p "${ES_CERTS_OUTPUT_DIR}"
mkdir -p "${CONFIG_DIR}/certificates"
mkdir -p "${CONFIG_DIR}/elasticsearch"
mkdir -p "${CONFIG_DIR}/kibana"
mkdir -p "${SCRIPTS_DIR}"

sudo chown -R 1000:1000 "${ES_HOST_DATA_DIR}" || echo "Warning: chown for ${ES_HOST_DATA_DIR} failed."
sudo chmod -R ug+rwx "${ES_HOST_DATA_DIR}"    || echo "Warning: chmod for ${ES_HOST_DATA_DIR} failed."

# 4. Build the cracked JAR
echo "[4/5] Building cracked x-pack-core JAR (version ${VERSION})..."
cd "${CRACK_BUILDER_DIR}"
if ! bash ./crack.sh "${VERSION}"; then
    echo "ERROR: Failed to build cracked JAR."
    cd "${SCRIPT_DIR}"
    exit 1
fi
cd "${SCRIPT_DIR}"

# 5. Move cracked JAR
echo "[5/5] Moving cracked JAR..."
mkdir -p "${CRACK_OUTPUT_DIR_HOST}"
CRACKED_JAR_NAME="x-pack-core-${VERSION}.crack.jar"
SOURCE_JAR_PATH="${CRACK_BUILDER_DIR}/output/${CRACKED_JAR_NAME}"

if [ -f "${SOURCE_JAR_PATH}" ]; then
    mv "${SOURCE_JAR_PATH}" "${CRACK_OUTPUT_DIR_HOST}/${CRACKED_JAR_NAME}"
    echo "Cracked JAR moved to ${CRACK_OUTPUT_DIR_HOST}/${CRACKED_JAR_NAME}"
else
    echo "ERROR: Cracked JAR not found at ${SOURCE_JAR_PATH}. Build failed."
    exit 1
fi
# Optional: Clean up crack builder output directory
# rm -rf "${CRACK_BUILDER_DIR}/output"


echo "--------------------------------------------------------------------"
echo "Initial ELK Stack setup script complete (Version: ${VERSION})."
echo "1. Please ensure ELASTIC_PASSWORD in '${ENV_FILE}' is set to your desired strong password."
echo "2. Then run 'sudo ./start-elk.sh' to generate certs, setup passwords, and start the stack."
echo "--------------------------------------------------------------------"